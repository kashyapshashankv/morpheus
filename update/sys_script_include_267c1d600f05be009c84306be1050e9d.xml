<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_moda_morpheus_ca.LookUpUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>LookUpUtils</name>
        <script><![CDATA[var LookUpUtils = Class.create();
LookUpUtils.prototype = {
    initialize: function() {
    },

    type: 'LookUpUtils',

    getLookupValuesLayout: function(layoutId, type, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        utils.log('debug', 'getLookupValuesLayout: layoutId:' + layoutId + ', type:' + type);
        var multiTenantMode = utils.getIsMultiTenant();

        var lookupValuesList = [];

        var lookupValue = new GlideRecord('x_moda_morpheus_ca_lookup_values_layout');
        lookupValue.addQuery('layoutid', layoutId);
        lookupValue.addQuery('type',type);
        if(multiTenantMode) {
            lookupValue.addQuery('tenantscope', tenantId);
        }
        lookupValue.query();

        while(lookupValue.next()) {
            lookupValuesList.push(lookupValue.sys_id.toString());
        }

        return 'sys_idIN' + lookupValuesList;
    },

    getLookupValues: function(cloud, provisionType, type, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();

        utils.log('debug', 'cloud:' + cloud + ', provisionType:' + provisionType + ', type:' + type);

        var lookupValuesList = [];

        if(cloud) {
            var grProvisionType = new GlideRecord('x_moda_morpheus_ca_provision_type');
            grProvisionType.addQuery('externalid', provisionType);
            if(multiTenantMode) {
                grProvisionType.addQuery('tenantscope', tenantId);
            }
            grProvisionType.query();
            grProvisionType.next();

            var lookupValue = new GlideRecord('x_moda_morpheus_ca_lookup_values_cloud');
            lookupValue.addQuery('cloud',cloud);
            lookupValue.addQuery('type',type);
            lookupValue.addQuery('provision_type',grProvisionType.sys_id);
            if(multiTenantMode) {
                lookupValue.addQuery('tenantscope', tenantId);
            }
            lookupValue.query();

            while(lookupValue.next()) {
                lookupValuesList.push(lookupValue.sys_id.toString());
            }
        }

        return 'sys_idIN' + lookupValuesList;
    },

    getGroupsForProvisionType: function(provisionType, tenantId) {
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();
        utils.log('debug',"provisionType: " + provisionType);
        // Need to find all the Clouds that allow this provision type.. then, work way back up to the groups that are possible

        var sysIds = [];

        var grCloudToProvTypes = new GlideRecord("x_moda_morpheus_ca_m2m_provision_types_clouds");
        grCloudToProvTypes.addQuery('provision_type.externalid', provisionType);
        if(multiTenantMode) {
            grCloudToProvTypes.addQuery('tenantscope', tenantId);
        }
        grCloudToProvTypes.query();
        while(grCloudToProvTypes.next()) {
            var cloud = grCloudToProvTypes.clouds;
            var grGroupsToClouds = new GlideRecord("x_moda_morpheus_ca_m2m_clouds_groups");
            grGroupsToClouds.addQuery('clouds', cloud);
            grGroupsToClouds.query();
            while(grGroupsToClouds.next()) {
                sysIds.push(grGroupsToClouds.group.sys_id.toString());
            }
        }

        return 'sys_idIN' + sysIds;
    },

    getCloudsForGroups: function(group, provisionType, tenantId) {
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();
        utils.log('debug', "group: " + group + "provisionType: " + provisionType);

        var sysIds = [];
        var grGroupsToClouds = new GlideRecord("x_moda_morpheus_ca_m2m_clouds_groups");
        grGroupsToClouds.addQuery('group', group);
        if(multiTenantMode) {
            grGroupsToClouds.addQuery('tenantscope', tenantId);
        }
        grGroupsToClouds.query();

        var grCloud = new GlideRecord("x_moda_morpheus_ca_clouds");
        var grProvisionType = new GlideRecord("x_moda_morpheus_ca_provision_type");
        if(grProvisionType.get('externalid', provisionType)){

            while (grGroupsToClouds.next()) {
                if (grCloud.get('sys_id', grGroupsToClouds.getValue('clouds'))) {
                    if(grCloud.enabled == true) {
                        var grCloudToProvTypes = new GlideRecord("x_moda_morpheus_ca_m2m_provision_types_clouds");
                        grCloudToProvTypes.addQuery('clouds', grCloud.sys_id);
                        if(multiTenantMode) {
                            grCloudToProvTypes.addQuery('tenantscope', tenantId);
                        }
                        grCloudToProvTypes.addQuery('provision_type', grProvisionType.sys_id);
                        grCloudToProvTypes.query();

                        if(grCloudToProvTypes.next()) {
                            sysIds.push(grCloud.sys_id.toString());
                        }
                    }
                }
            }
        }
        return 'sys_idIN' + sysIds;
    },

    getResourcePoolsForCloud: function(cloud, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();

        utils.log('debug', 'getResourcePoolsForCloud: ' + cloud);
        var resourcePoolList = [];

        if(cloud) {
            var resourcePools = new GlideRecord('x_moda_morpheus_ca_resource_pool');
            resourcePools.addQuery('cloud', cloud);
            if(multiTenantMode) {
                resourcePools.addQuery('tenantscope', tenantId);
            }
            resourcePools.query();

            while(resourcePools.next()) {
                resourcePoolList.push(resourcePools.sys_id.toString());
            }
        }

        return 'sys_idIN' + resourcePoolList;
    },

    getNetworksForCloud: function(cloud, provisionType, resourcePool, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();
        utils.log('debug', 'getNetworksForCloud: ' + cloud + ', ' + provisionType + ', ' + resourcePool);
        var networkList = [];
        var resourcePoolNetworks = [];

        if(resourcePool) {
            // First.. find all the networks that are for the resource pool
            var grResourcePoolsToNetworks = new GlideRecord("x_moda_morpheus_ca_m2m_networks_resource_pools");
            grResourcePoolsToNetworks.addQuery('resource_pool', resourcePool);
            if(multiTenantMode) {
                grResourcePoolsToNetworks.addQuery('tenantscope', tenantId);
            }
            grResourcePoolsToNetworks.query();
            while (grResourcePoolsToNetworks.next()) {
                gs.info('sysid: ' + grResourcePoolsToNetworks.network.sys_id.toString());
                resourcePoolNetworks.push(grResourcePoolsToNetworks.network.sys_id.toString());
            }
        }
        gs.debug('resourcePoolNetworks: ' + resourcePoolNetworks);

        if(cloud) {
            var grProvisionType = new GlideRecord('x_moda_morpheus_ca_provision_type');
            grProvisionType.addQuery('externalid', provisionType);
            if(multiTenantMode) {
                grProvisionType.addQuery('tenantscope', tenantId);
            }
            grProvisionType.query();
            grProvisionType.next();

            var networks = new GlideRecord('x_moda_morpheus_ca_network');
            networks.addQuery('cloud', cloud);
            if(multiTenantMode) {
                networks.addQuery('tenantscope', tenantId);
            }
            networks.addQuery('provision_type', grProvisionType.sys_id);
            if( resourcePool ) {
                gs.debug('using resource pool');
                networks.addQuery('sys_id', 'IN', resourcePoolNetworks.join(','));
            }
            networks.query();

            while(networks.next()) {
                networkList.push(networks.sys_id.toString());
            }
        }

        return 'sys_idIN' + networkList;
    },

    getSubnetsForCloud: function(cloud, provisionType, resourcePool, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();
        utils.log('debug', 'getSubnetsForCloud: ' + cloud + ', ' + provisionType + ', ' + resourcePool);
        var subnetList = [];
        var resourcePoolSubnets = [];

        if(resourcePool) {
            // First.. find all the subnets that are for the resource pool
            var grResourcePoolsToSubnets = new GlideRecord("x_moda_morpheus_ca_m2m_subnets_resource_pools");
            grResourcePoolsToSubnets.addQuery('resource_pool', resourcePool);
            if(multiTenantMode) {
                grResourcePoolsToSubnets.addQuery('tenantscope', tenantId);
            }
            grResourcePoolsToSubnets.query();
            while (grResourcePoolsToSubnets.next()) {
                gs.debug('sysid: ' + grResourcePoolsToSubnets.subnet.sys_id.toString());
                resourcePoolSubnets.push(grResourcePoolsToSubnets.subnet.sys_id.toString());
            }
        }
        gs.debug('resourcePoolSubnets: ' + resourcePoolSubnets);

        if(cloud) {
            var grProvisionType = new GlideRecord('x_moda_morpheus_ca_provision_type');
            grProvisionType.addQuery('externalid', provisionType);
            if(multiTenantMode) {
                grProvisionType.addQuery('tenantscope', tenantId);
            }
            grProvisionType.query();
            grProvisionType.next();

            var subnets = new GlideRecord('x_moda_morpheus_ca_subnet');
            subnets.addQuery('cloud', cloud);
            if(multiTenantMode) {
                subnets.addQuery('tenantscope', tenantId);
            }
            subnets.addQuery('provision_type', grProvisionType.sys_id);
            if( resourcePool ) {
                gs.debug('using resource pool');
                subnets.addQuery('sys_id', 'IN', resourcePoolSubnets.join(','));
            }
            subnets.query();

            while(subnets.next()) {
                subnetList.push(subnets.sys_id.toString());
            }
        }

        return 'sys_idIN' + subnetList;
    },

    getDatastoresForCloud: function(cloud, provisionType, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();

        utils.log('debug', 'getDatastoresForCloud: ' + cloud + ', ' + provisionType);
        var datastoreList = [];

        if(cloud) {
            var grProvisionType = new GlideRecord('x_moda_morpheus_ca_provision_type');
            grProvisionType.addQuery('externalid', provisionType);
            if(multiTenantMode) {
                grProvisionType.addQuery('tenantscope', tenantId);
            }
            grProvisionType.query();
            grProvisionType.next();

            var datastores = new GlideRecord('x_moda_morpheus_ca_datastore');
            datastores.addQuery('cloud', cloud);
            if(multiTenantMode) {
                datastores.addQuery('tenantscope', tenantId);
            }
            datastores.addQuery('provision_type', grProvisionType.sys_id);
            datastores.query();

            while(datastores.next()) {
                datastoreList.push(datastores.sys_id.toString());
            }
        }

        return 'sys_idIN' + datastoreList;
    },

    getServicePlans: function(cloud, provisionType, tenantId){
        var utils = new x_moda_morpheus_ca.Utils();
        var multiTenantMode = utils.getIsMultiTenant();

        utils.log('debug', 'getServicePlans: provisionType:' + provisionType + ', cloud: ' + cloud);
        var planList = [];

        if(cloud) {
            var grProvisionType = new GlideRecord('x_moda_morpheus_ca_provision_type');
            grProvisionType.addQuery('externalid', provisionType);
            if(multiTenantMode) {
                grProvisionType.addQuery('tenantscope', tenantId);
            }
            grProvisionType.query();
            grProvisionType.next();

            var plans = new GlideRecord('x_moda_morpheus_ca_service_plans');
            plans.addQuery('provision_type', grProvisionType.sys_id);
            if(multiTenantMode) {
                plans.addQuery('tenantscope', tenantId);
            }
            // Only scope service plans to regions for Azure.. kind of a hack!
            if(grProvisionType.externalid == 'azure' && cloud.region_code != '' && typeof(cloud.region_code) != 'undefined') {
                plans.addQuery('region_code', cloud.region_code);
            }

            plans.query();

            while(plans.next()) {
                planList.push(plans.sys_id.toString());
            }
        }

        return 'sys_idIN' + planList;
    },

    getDomainSysIdForCompany: function(companySysId) {
        if(companySysId && companySysId != '') {
            var gr = new GlideRecord('core_company');
            gr.addQuery('sys_id', companyId);
            gr.query()
            gr.next()
            return gr.sys_domain;
        }
        return '';
    },

    fetchAuthConfig: function(tenantId, companySysId, domainSysId) {
        var authConfig = {access_token: '', username: '', password:'', url: '', tenantId: '', companySysId: '', domainSysId: ''};
        var utils = new x_moda_morpheus_ca.Utils();

        // if single-tenant.. ignore company and domain
        try {
            var r = new sn_ws.RESTMessageV2('x_moda_morpheus_ca.Morpheus Authenticate', 'post');

            var username;
            var password;
            var url;
            var multiTenantMode = utils.getIsMultiTenant();
            if(multiTenantMode){
                if(typeof(tenantId) == 'undefined' && (companySysId == '' || !companySysId) && (domainSysId == '' || !domainSysId)) {
                    gs.error('Multi-tenant mode but no tenantId, companySysId, or domainSysId passed!');
                    return authConfig;
                }
                var creds = new GlideRecord('x_moda_morpheus_ca_credentials');
                if(tenantId) {
                    creds.addQuery('morpheus_tenant', tenantId);
                } else {
                    if (companySysId) {
                        creds.addQuery('company', companySysId);
                    }
                    if (domainSysId) {
                        creds.addQuery('sys_domain', domainSysId);
                    }
                }
                creds.setLimit(1);
                creds.query();
                creds.next();
                if (!creds.sys_id) {
                    gs.debug('Did not find credentials for tenant: ' + tenantId + ', companySysId: ' + companySysId + ', domainSysId: ' + domainSysId);

                    if(tenantId == '' || typeof(tenantId) == 'undefined' && companySysId && domainSysId) {
                        // If looking via both company and domain... see if we have anything for just the domain (fall back)
                        creds = new GlideRecord('x_moda_morpheus_ca_credentials');
                        creds.addQuery('sys_domain', domainSysId);
                        creds.setLimit(1);
                        creds.query();
                        creds.next();
                        if (!creds.sys_id) {
                            gs.error('Unable to find credentials for domain: ' + domainSysId);
                            return authConfig
                        }
                    } else {
                        return authConfig;
                    }
                }
                username = creds.username;
                password = creds.password.getDecryptedValue();
                url = creds.appliance_url;
                authConfig.tenantId = creds.morpheus_tenant;
                authConfig.companySysId = creds.company;
                authConfig.sys_domain = creds.sys_domain;
                authConfig.midServer = creds.mid_server;
            } else {
                username = gs.getProperty('x_moda_morpheus_ca.morpheus_username');
                password = gs.getProperty('x_moda_morpheus_ca.morpheus_password');
                url = gs.getProperty('x_moda_morpheus_ca.morpheus_url');
            }

            if(authConfig.midServer) {
                r.setMIDServer(authConfig.midServer);
                r.setEccParameter("skip_sensor","true");
            }

            if(authConfig.tenantId) {
                r.setStringParameterNoEscape('username', authConfig.tenantId + '\\' + username);
            } else {
                r.setStringParameterNoEscape('username', username);
            }
            r.setStringParameterNoEscape('password', password);
            r.setStringParameterNoEscape('url', url);

            authConfig.username = username;
            authConfig.password = password;
            authConfig.url = url;

            var response = r.execute();
            var responseBody = response.getBody();
            var parser = new global.JSON();
            var jsonBody = parser.decode(responseBody);
            var httpStatus = response.getStatusCode();
            authConfig.access_token = jsonBody['access_token'];
        }
        catch(ex) {
            gs.error('Error fetching access token.  Verify system properties / credentials for auth settings and route to host.' + ex);
        }
        return authConfig;
    }
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-02-16 19:12:31</sys_created_on>
        <sys_id>267c1d600f05be009c84306be1050e9d</sys_id>
        <sys_mod_count>65</sys_mod_count>
        <sys_name>LookUpUtils</sys_name>
        <sys_package display_value="Morpheus Catalog" source="x_moda_morpheus_ca">8d8b6bbf0ff07e009c84306be1050e67</sys_package>
        <sys_policy/>
        <sys_scope display_value="Morpheus Catalog">8d8b6bbf0ff07e009c84306be1050e67</sys_scope>
        <sys_update_name>sys_script_include_267c1d600f05be009c84306be1050e9d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-05-11 18:19:01</sys_updated_on>
    </sys_script_include>
</record_update>
